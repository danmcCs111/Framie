import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.Collection;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.googleapis.json.GoogleJsonResponseException;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.YouTube.ChannelSections;
import com.google.api.services.youtube.YouTube.Channels;
import com.google.api.services.youtube.YouTube.Videos;
import com.google.api.services.youtube.model.ChannelListResponse;
import com.google.api.services.youtube.model.ChannelSectionListResponse;
import com.google.api.services.youtube.model.SearchListResponse;
import com.google.api.services.youtube.model.SearchResult;
import com.google.api.services.youtube.model.Video;
import com.google.api.services.youtube.model.VideoListResponse;

public class ApiExample 
{
	private static final String 
		CLIENT_SECRETS= "C:\\Users\\danie\\Documents\\client_secret.json",
		YOUTUBE_FREE_MOVIES_CHANNEL = "UCuVPpxrm2VAgpH3Ktln4HXg";
    private static final Collection<String> SCOPES =
        Arrays.asList("https://www.googleapis.com/auth/youtube.readonly");

    private static final String APPLICATION_NAME = "API code samples";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String 
    	MOVIE_POSTER_PREFIX = "https://i.ytimg.com/vi_webp/",
    	MOVIE_POSTER_SUFFIX = "/movieposter_en.webp",
    	YOUTUBE_PREFIX = "https://www.youtube.com/watch?v=";

    /**
     * Create an authorized Credential object.
     *
     * @return an authorized Credential object.
     * @throws IOException
     */
    public static Credential authorize(final NetHttpTransport httpTransport) throws IOException 
    {
        // Load client secrets.
    	InputStream in = new FileInputStream(CLIENT_SECRETS);
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));
        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow =
            new GoogleAuthorizationCodeFlow.Builder(httpTransport, JSON_FACTORY, clientSecrets, SCOPES)
            .build();
        Credential credential =
            new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
        return credential;
    }

    /**
     * Build and return an authorized API client service.
     *
     * @return an authorized API client service
     * @throws GeneralSecurityException, IOException
     */
    public static YouTube getService() throws GeneralSecurityException, IOException 
    {
        final NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = authorize(httpTransport);
        return new YouTube.Builder(httpTransport, JSON_FACTORY, credential)
            .setApplicationName(APPLICATION_NAME)
            .build();
    }

    /**
     * Call function to create API service object. Define and
     * execute API request. Print API response.
     *
     * @throws GeneralSecurityException, IOException, GoogleJsonResponseException
     */
    public static void main(String[] args)
        throws GeneralSecurityException, IOException, GoogleJsonResponseException 
    {
        YouTube youtubeService = getService();
        
        findChannelSections(youtubeService, youtubeFreeMoviesChannel);
        findChannels(youtubeService, youtubeFreeMoviesChannel);
        printVideosByChannelId(youtubeService, youtubeFreeMoviesChannel);
    }
    
    public static void findChannelSections(YouTube youtubeService, String channelId) throws IOException
    {
    	ChannelSections cs = youtubeService.channelSections();
    	YouTube.ChannelSections.List l = cs.list("id, snippet, contentDetails");
    	ChannelSectionListResponse cslr = l.setChannelId(channelId).execute();
    	System.out.println(cslr);
    }
    
    public static void findChannels(YouTube youtubeService, String channelId) throws IOException
    {
    	Channels cs = youtubeService.channels();
    	YouTube.Channels.List l = cs.list("id, snippet, contentDetails");
    	ChannelListResponse cslr = l.setId(channelId).execute();
    	System.out.println(cslr);
    }
    
	public static void printVideosByChannelId(YouTube youtubeService, String channelId) throws IOException
	{
        YouTube.Search.List requestSearch = youtubeService.search()
        		.list("snippet");
            SearchListResponse responseSearch = requestSearch.setChannelId(channelId)
                    .setMaxResults(2000L)
            		.setType("videoId")
            		.execute();
        System.out.println(responseSearch);
        for (SearchResult sr : responseSearch.getItems())
        {
        	String videoId = sr.getId().getVideoId();
          // Define and execute the API request
          Videos.List videosRequest = youtubeService.videos().list("snippet,contentDetails,statistics");
          videosRequest.setMaxResults(1000L);
          VideoListResponse responseVideos = videosRequest.setId(videoId).execute();
          for(Video v : responseVideos.getItems())
          {
        	  System.out.println(v.getSnippet().getTitle());
        	  System.out.println(v.getSnippet().getThumbnails().getHigh().getUrl());
          }
          System.out.println(MOVIE_POSTER_PREFIX + videoId + MOVIE_POSTER_SUFFIX);
          System.out.println(YOUTUBE_PREFIX + videoId);
        }
	}
}
