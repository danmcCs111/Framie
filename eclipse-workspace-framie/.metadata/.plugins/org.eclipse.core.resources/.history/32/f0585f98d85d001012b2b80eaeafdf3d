import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.Collection;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.googleapis.json.GoogleJsonResponseException;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.YouTube.PlaylistItems;
import com.google.api.services.youtube.YouTube.Videos;
import com.google.api.services.youtube.YouTube.Videos.List;
import com.google.api.services.youtube.model.ChannelListResponse;
import com.google.api.services.youtube.model.PlaylistItemListResponse;
import com.google.api.services.youtube.model.PlaylistListResponse;
import com.google.api.services.youtube.model.SearchListResponse;
import com.google.api.services.youtube.model.SearchResult;
import com.google.api.services.youtube.model.VideoListResponse;

public class ApiExample 
{
	private static final String CLIENT_SECRETS= "client_secret.json";
    private static final Collection<String> SCOPES =
        Arrays.asList("https://www.googleapis.com/auth/youtube.readonly");

    private static final String APPLICATION_NAME = "API code samples";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

    /**
     * Create an authorized Credential object.
     *
     * @return an authorized Credential object.
     * @throws IOException
     */
    public static Credential authorize(final NetHttpTransport httpTransport) throws IOException 
    {
        // Load client secrets.
        InputStream in = ApiExample.class.getResourceAsStream(CLIENT_SECRETS);
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));
        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow =
            new GoogleAuthorizationCodeFlow.Builder(httpTransport, JSON_FACTORY, clientSecrets, SCOPES)
            .build();
        Credential credential =
            new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
        return credential;
    }

    /**
     * Build and return an authorized API client service.
     *
     * @return an authorized API client service
     * @throws GeneralSecurityException, IOException
     */
    public static YouTube getService() throws GeneralSecurityException, IOException 
    {
        final NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = authorize(httpTransport);
        return new YouTube.Builder(httpTransport, JSON_FACTORY, credential)
            .setApplicationName(APPLICATION_NAME)
            .build();
    }

    /**
     * Call function to create API service object. Define and
     * execute API request. Print API response.
     *
     * @throws GeneralSecurityException, IOException, GoogleJsonResponseException
     */
    public static void main(String[] args)
        throws GeneralSecurityException, IOException, GoogleJsonResponseException 
    {
    	//UCuVPpxrm2VAgpH3Ktln4HXg youtubefree
        YouTube youtubeService = getService();
//        // Define and execute the API request
//        Videos.List videosRequest = youtubeService.videos().list("snippet,contentDetails,statistics");
//        videosRequest.setMaxResults(1000L);
//        VideoListResponse responseVideos = videosRequest.set
//        System.out.println(responseVideos);
        
        YouTube.Channels.List request = youtubeService.channels()
            .list("snippet,contentDetails,statistics");
        request.setMaxResults(1000L);
        ChannelListResponse response = request.setId("UCvI-KZbebDSQhr8jYYV5E1w").execute();
        System.out.println(response);
        
        
//        YouTube.PlaylistItems.List requestPlaylistItems = youtubeService.playlistItems()
//        		.list("snippet,contentDetails,statistics");
//        requestPlaylistItems.setMaxResults(1000L);
//        PlaylistItemListResponse responsePlaylistItems = requestPlaylistItems.setPlaylistId("FQNdgHFNLmzYDzDum10GvYXjPqc").execute();
//        System.out.println(responsePlaylistItems);
//        
//        YouTube.Playlists.List requestPlaylists = youtubeService.playlists()
//                .list("snippet,contentDetails,statistics");
//        requestPlaylists.setMaxResults(1000L);
//            PlaylistListResponse responsePlaylists = requestPlaylists.setChannelId("UCvI-KZbebDSQhr8jYYV5E1w").execute();
//            System.out.println(responsePlaylists);
        
        
//        YouTube.Search.List requestSearch = youtubeService.search()
//        		.list("snippet");
//        	requestSearch.setMaxResults(1000L);
//            SearchListResponse responseSearch = requestSearch.setChannelId("UCvI-KZbebDSQhr8jYYV5E1w")
////                    .setMaxResults(1000L)
//            		.setType("videoId")
//            		.execute();
//            System.out.println(responseSearch);
            
            YouTube.Search.List requestSearch = youtubeService.search()
            		.list("snippet");
                SearchListResponse responseSearch = requestSearch.setChannelId("UCuVPpxrm2VAgpH3Ktln4HXg")
                        .setMaxResults(2000L)
                		.setType("videoId")
                		.execute();
                System.out.println(responseSearch);
                for (SearchResult sr : responseSearch.getItems())
                {
                	String videoId = sr.getId().getVideoId();
                	System.out.println(videoId);
                }
    }
}
